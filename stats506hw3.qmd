---
title: "stats506hw3"
format: pdf
editor: visual
---

## Problem 1- Vision

a\.

``` stata
import sasxport5 "/Users/limcw/Downloads/VIX_D.XPT", clear
save "/Users/limcw/Downloads/VIX_D.dta", replace

import sasxport5 "/Users/limcw/Downloads/DEMO_D.XPT", clear
save "/Users/limcw/Downloads/DEMO_Ddta", replace

use "/Users/limcw/Downloads/VIX_D.dta", clear
merge 1:1 seqn using "/Users/limcw/Downloads/DEMO_D.dta", keep(
matched)

count
```

![](images/Screenshot%202023-10-09%20at%2010.58.09%20PM.png){width="366"}

b\.

``` stata
* Generate age brackets
gen age_bracket = cond(ridageyr < 10, "0-9", ///
                  cond(ridageyr < 20, "10-19", ///
                  cond(ridageyr < 30, "20-29", ///
                  cond(ridageyr < 40, "30-39", ///
                  cond(ridageyr < 50, "40-49", ///
                  cond(ridageyr < 60, "50-59", ///
                  cond(ridageyr < 70, "60-69", ///
                  cond(ridageyr < 80, "70-79", ///
                  "80+"))))))))

* Calculate the proportion of people wearing glasses/contact
lenses for each age bracket
glasses/contact lenses within each age bracket
collapse (mean) glasses_contact_mean = viq220 (count) total =
viq220, by(age_bracket)

* Calculate the proportion of people wearing glasses/contact lenses
gen proportion = glasses_contact_mean / total * 100

list age_bracket_label proportion
```

c.![](images/Screenshot%202023-10-09%20at%2011.06.34%20PM.png){width="196"}

``` stata
* Make viq220 into a binary variable
gen glasses_contact_binary = (viq220 == 1)

* Fit the logistic regression model with age predictor
logit glasses_contact_binary ridageyr
logistic glasses_contact_binary ridageyr

* Store results for Model 1
eststo Model1

* Calculate AIC for Model 1
scalar AIC_Model1 = -2 * e(ll) + 2 * 2
display "AIC for Model 1: " AIC_Model1

* Fit the logistic regression model with age, race, and gender
predictors
logit glasses_contact_binary ridageyr i.ridreth1 i.riagendr
logistic glasses_contact_binary ridageyr i.ridreth1 i.riagendr

* Calculate AIC for Model 2
scalar AIC_Model2 = -2 * e(ll) + 2 * 4
display "AIC for Model 2: " AIC_Model2

* Store results for Model 2
eststo Model2
  
* Fit the logistic regression model with age, race, gender, and
Poverty Income Ratio predictors
logit glasses_contact_binary ridageyr i.ridreth1 i.riagendr indfmpir
logistic glasses_contact_binary ridageyr i.ridreth1 i.riagendr indfmpir

* Calculate AIC for Model 3
scalar AIC_Model3 = -2 * e(ll) + 2 * 5
display "AIC for Model 3: " AIC_Model3

* Store results for Model 3
eststo Model3
```

![](images/Screenshot%202023-10-09%20at%2011.07.14%20PM.png)

![](images/Screenshot%202023-10-09%20at%2011.26.51%20PM.png)

![](images/Screenshot%202023-10-09%20at%2011.33.42%20PM.png){width="290"}

![](images/Screenshot 2023-10-10 at 12.06.28 AM.png)

![](images/Screenshot 2023-10-10 at 12.06.39 AM.png)

![](images/Screenshot%202023-10-09%20at%2011.27.07%20PM.png)

![](images/Screenshot%202023-10-09%20at%2011.08.26%20PM.png){width="323"}

![](images/Screenshot%202023-10-09%20at%2011.09.00%20PM.png)

![](images/Screenshot%202023-10-09%20at%2011.30.18%20PM.png)

![](images/Screenshot 2023-10-10 at 12.07.41 AM.png)

![](images/Screenshot%202023-10-09%20at%2011.30.41%20PM.png){width="411"}

d\.

``` stata
* Calculate the proportion of wearers for men
gen men_wearers = (viq220 == 1) if riagendr == 1
summarize men_wearers, meanonly

* Calculate the proportion of wearers for women
gen women_wearers = (viq220 == 1) if riagendr == 2
summarize women_wearers, meanonly

* Perform a two-sample proportion test
prtest men_wearers = women_wearers
```

![](images/Screenshot%202023-10-09%20at%2011.10.02%20PM.png)

Since the p-value is very small for testing the null hypothesis that the proportion of men wearers and women wearers are the same, I reject my null hypothesis, and conclude that there is a significant difference in the proportions of wearers between men and women.

## Problem 2- Sakila

a\.

```{r}
library(DBI)  
library(dplyr)
library(RSQLite)

con <- dbConnect(RSQLite::SQLite(), "/Users/chaewonlim/Downloads/sakila_master.db")

# Query the names of all tables in the database
table_names <- dbGetQuery(con, "SELECT name FROM sqlite_master WHERE type='table'")

query <- "SELECT l.name AS most_common_language
          FROM language l
          LEFT JOIN film f ON l.language_id = f.language_id AND l.name != 'English'
          GROUP BY l.name
          ORDER BY COUNT(f.film_id) DESC
          LIMIT 1;"


result <- dbGetQuery(con, query)

print(result)

#It is Mandarin.
```

b\.

```{r}
query <- "SELECT category.name AS genre, COUNT(film.film_id) AS movie_count
          FROM film
          JOIN film_category ON film.film_id =         film_category.film_id
          JOIN category ON film_category.category_id = category.category_id
          GROUP BY genre
          ORDER BY movie_count DESC
          LIMIT 1;"

result <- dbGetQuery(con, query)

print(result)
```

```{r}
query <- "SELECT category.name AS genre, COUNT(film.film_id) AS movie_count
          FROM film
          JOIN film_category ON film.film_id =         film_category.film_id
          JOIN category ON film_category.category_id = category.category_id
          GROUP BY genre
          ORDER BY movie_count DESC;"


result <- dbGetQuery(con, query)

print(result[which.max(result$movie_count),])
```

c\.

```{r}
query <- "SELECT country.country AS country_name,                 
          COUNT(customer.customer_id) AS customer_count
          FROM country
          JOIN city ON country.country_id = city.country_id
          JOIN address ON city.city_id = address.city_id
          JOIN customer ON address.address_id = customer.address_id
          GROUP BY country_name
          HAVING customer_count = 9;"

result <- dbGetQuery(con, query)
print(result)
```

```{r}
query <- "SELECT country.country AS country_name,                 
          COUNT(customer.customer_id) AS customer_count
          FROM country
          JOIN city ON country.country_id = city.country_id
          JOIN address ON city.city_id = address.city_id
          JOIN customer ON address.address_id = customer.address_id
          GROUP BY country_name;"

result <- dbGetQuery(con, query)

print(result[result$customer_count == 9, ])
```

## Problem 3- US Records

```{r}
us500 <- read.csv("/Users/chaewonlim/Desktop/STATS506/us-500.csv")

#3a
# Create a new column for  domains
us500 <- us500 %>%
  mutate(domain = tolower(sub(".*@([^@]+)$", "\\1", email)))

# Count the number of email addresses with ".net" TLD
net_count <- sum(grepl(".net$", us500$domain))

#Calculate the proportion
cat("Proportion of email addresses with '.net' TLD:", net_count / 
      dim(us500)[1])

```

```{r}
#3b
# Create a new column to check for non-alphanumeric characters
us500 <- us500 %>%
  mutate(has_non_alphanumeric = grepl("[^[:alnum:]]", gsub("[@.]", "",email)))

# Count the number of email addresses with at least one non-alphanumeric character
na_count <- sum(us500$has_non_alphanumeric)

#Calcualte proportion
cat("Proportion of email addresses with at least one non-alphanumeric
    character:", na_count / nrow(us500))
```

```{r}
#3c
# Extract area codes from phone numbers
us500 <- us500 %>%
  mutate(area_code = substr(phone1, 1, 3))

# Count the occurrences of each area code
area_code_counts <- us500 %>%
  group_by(area_code) %>%
  summarize(count = n()) %>%
  arrange(desc(count))

# Get the most common area code
cat("The most common area code amongst all phone numbers is:",
    area_code_counts$area_code[1])
```

```{r}
#3d
# Extract apartment numbers
us500 <- us500 %>%
  mutate(apartment_number = ifelse(grepl("#(\\d+)", address), 
                                   as.numeric(sub(".*#(\\d+).*", "\\1", address)), 
                                   NA))

# Filter out rows without apartment numbers or non-numeric apartment numbers
us500 <- us500 %>%
  filter(!is.na(apartment_number) & !is.na(log(apartment_number)))

# Take the logarithm of apartment numbers
us500 <- us500 %>%
  mutate(log_apartment_number = log(apartment_number))

# Create a histogram of the log-transformed apartment numbers
hist(us500$log_apartment_number, 
     main = "Histogram of Log Apartment Numbers", 
     xlab = "Log Apartment Numbers", breaks = 20)
```

```{r}
#3e
# Extract the leading digits from the apartment numbers
leading_digits <- as.integer(substr(as.character(us500$apartment_number), 1, 1))

# Create a data frame to count the occurrences of each leading digit
leading_digit_counts <- table(leading_digits)

# Create a bar plot of the leading digit distribution
barplot(leading_digit_counts, names.arg = names(leading_digit_counts), 
        main = "Leading Digit Distribution",
        xlab = "Leading Digit", ylab = "Count")

#No, it will not pass as real data.
```

```{r}
#3f
# Extract the last digit from the street numbers
last_digits <- as.integer(substr(as.character(us500$address),
                                 nchar(us500$address), nchar(us500$address)))

# Create a data frame to count the occurrences of each leading digit
ending_digit_counts <- table(last_digits)

# Create a bar plot of the leading digit distribution
barplot(ending_digit_counts, names.arg = names(ending_digit_counts), 
        main = "Ending Digit Distribution",
        xlab = "Ending Digit", ylab = "Count")

#No, it will not pass as real data.
```
